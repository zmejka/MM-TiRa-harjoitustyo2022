import unittest
import random
from map_file import MapFile
from algorithm_core import AlgorithmCore
from jps import Jps

class TestAStar(unittest.TestCase):
    def setUp(self):
        self.data = [['@','@','@','@','@'],
                    ['@','.','.','.','@'],
                    ['@','.','.','.','@'],
                    ['@','.','.','.','@'],
                    ['@','@','@','@','@']]
        self.test_jps = Jps(self.data)

    def test_find_path_available(self):
        start = (1,1)
        end = (3,3)
        self.assertEqual(self.test_jps.jps(start,end)[1], [(1,1),(3,3)])

    def test_no_path_available(self):
        test_data = [['@','@','@','@','@'],
                    ['@','.','@','.','@'],
                    ['@','.','@','.','@'],
                    ['@','.','@','.','@'],
                    ['@','@','@','@','@']]
        test_algorithm = Jps(test_data)
        start = (1,1)
        end = (3,3)
        self.assertEqual(test_algorithm.jps(start,end), "Polkua ei l√∂ytynyt!")
    
    def test_diagonal_jumps_hor(self):
        test_data = [['.','.','.','.','@'],
                    ['@','@','.','.','@'],
                    ['@','.','.','.','@'],
                    ['@','@','@','.','@'],
                    ['@','.','.','.','@'],
                    ['@','@','@','@','@']]
        test_algorithm = Jps(test_data)
        start = (1,1)
        end = (3,3)
        self.assertEqual(test_algorithm.jps(start,end)[1], [(1,1),(3,3)])
    
    def test_diagonal_jumps_ver(self):
        test_data = [['.','.','.','.','@'],
                    ['@','.','.','@','@'],
                    ['@','@','.','.','@'],
                    ['.','.','@','.','@'],
                    ['@','.','@','.','@'],
                    ['@','@','@','@','@']]
        test_algorithm = Jps(test_data)
        start = (1,1)
        end = (3,3)
        self.assertEqual(test_algorithm.jps(start,end)[1], [(1,1),(2,2),(3,3)])
    
    def test_start_same_as_end(self):
        start = (1,1)
        end = (1,1)
        self.assertEqual(self.test_jps.jps(start,end)[1], ([(1,1)],0))

    def test_path_length_jps(self):
        test_data = [["@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"],
                    ["@",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@",".",".",".",".",".",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@",".",".",".",".",".",".",".",".",".","@",".",".",".","@",".",".",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@","@","@","@","@","@","@","@","@","@","@","@","@","@",".",".",".",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@","@",".",".",".",".",".",".","@",".",".",".",".",".",".",".","@",".",".",".",".",".",".","@","@",".",".","@"],
                    ["@",".",".",".","@","@",".",".",".",".",".",".","@",".","@",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".","@"],
                    ["@",".",".",".","@","@",".",".",".",".",".",".","@",".",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".","@"],
                    ["@",".",".",".","@","@",".",".",".",".",".",".","@",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".","@","@","@"],
                    ["@",".",".",".","@","@",".",".",".",".",".",".","@",".",".",".","@","@","@","@","@","@","@",".","@",".",".",".",".","@","@","@"],
                    ["@",".",".",".","@","@",".",".",".","@",".",".","@",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@","@"],
                    ["@",".",".",".","@","@",".",".","@",".",".",".","@",".","@",".",".",".",".",".",".",".","@",".",".",".",".",".",".","@","@","@"],
                    ["@",".",".",".","@","@",".","@",".",".",".",".","@","@",".",".",".",".",".",".",".",".","@",".",".",".",".",".",".","@","@","@"],
                    ["@",".",".",".","@","@","@",".",".",".",".",".","@","@","@","@","@","@","@","@","@","@","@","@","@","@",".",".",".","@","@","@"],
                    ["@",".",".",".",".","@",".",".",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@","@"],
                    ["@","@",".",".",".",".",".",".",".","@","@","@","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@","@"],
                    ["@","@",".",".",".",".",".",".",".","@","@","@","@","@","@","@","@","@","@","@","@","@","@",".",".",".",".",".",".",".",".","@"],
                    ["@",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@"],
                    ["@",".",".",".",".","@",".",".",".",".",".",".",".",".","@","@",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".","@"],
                    ["@","@",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@",".",".",".","@",".",".",".",".",".",".",".","@"],
                    ["@",".",".",".",".",".",".",".","@",".",".",".",".",".",".",".","@","@",".",".","@",".",".",".","@",".",".",".",".","@",".","@"],
                    ["@",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@",".","@",".",".",".",".",".","@",".","@"],
                    ["@",".","@",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".","@","@",".",".","@",".",".",".",".",".",".","@",".","@"],
                    ["@",".",".",".","@",".",".",".","@","@","@","@","@",".",".",".",".",".",".","@","@","@",".",".",".",".",".",".",".","@",".","@"],
                    ["@","@","@","@",".",".",".",".","@","@","@","@","@",".",".",".",".",".",".",".","@",".",".",".",".",".",".",".",".","@",".","@"],
                    ["@",".",".",".",".",".",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","@",".","@"],
                    ["@",".",".",".",".",".",".",".",".",".","@",".",".",".",".","@",".",".",".",".",".",".",".",".",".",".",".",".",".","@",".","@"],
                    ["@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"]]
        test_algorithm = Jps(test_data)
        start = (2,2)
        end = (5,29)
        self.assertEqual(round(test_algorithm.jps(start,end)[4],6), 65.112698)

    def test_scenario_jps_lenght(self):
        test_map = MapFile("test_brc503d.map")
        test_map_data = test_map.parameters()
        test_algorithm = Jps(test_map_data[0])
        start = (203,6)
        end = (75,292)
        self.assertEqual(round(test_algorithm.jps(start,end)[4],6), 466.735065)
    
    def test_scenario_jps_random_path(self):
        test_map = MapFile("test_brc503d.map")
        test_map_data = test_map.parameters()
        results = []
        while len(results) <= 20:   #100:
            test_algorithm = Jps(test_map_data[0])
            start = (random.randint(197, 210),random.randint(0,13))
            end = (random.randint(69,82),random.randint(286,299))
            if test_map_data[0][end[0]][end[1]]==".":
                result = test_algorithm.jps(start,end)[4]
                if isinstance(result, str):
                    continue
                else:
                    results.append(round(result,6))
        self.assertGreaterEqual(round(sum(results)/len(results),6), 462.126431)
        self.assertLessEqual(round(sum(results)/len(results),6), 471.402416)